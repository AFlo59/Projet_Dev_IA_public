#!/bin/bash
# üîç Script de Validation JWT - WebApp Integration
# V√©rifie que l'int√©gration JWT est correctement configur√©e

echo "üîç Validation de l'int√©gration JWT WebApp <-> API LLM"
echo "================================================="

errors=()
warnings=()

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# 1. V√©rifier la configuration appsettings.json
echo -e "\n1Ô∏è‚É£  V√©rification de webapp/appsettings.json..."

if [ -f "appsettings.json" ]; then
    # V√©rifier LLM_JWT_SECRET_KEY
    jwt_secret=$(grep -o '"LLM_JWT_SECRET_KEY"[^,]*' appsettings.json | cut -d'"' -f4)
    if [ ! -z "$jwt_secret" ]; then
        if [ ${#jwt_secret} -ge 32 ]; then
            echo -e "   ‚úÖ LLM_JWT_SECRET_KEY configur√©e (${#jwt_secret} caract√®res)" | sed "s/^/    /"
        else
            errors+=("‚ùå LLM_JWT_SECRET_KEY trop courte (${#jwt_secret} chars, minimum 32)")
        fi
        
        if [ "$jwt_secret" == "your-very-secure-secret-key-change-this-in-production-minimum-32-characters" ]; then
            warnings+=("‚ö†Ô∏è  LLM_JWT_SECRET_KEY utilise la valeur par d√©faut - CHANGEZ-LA !")
        fi
    else
        errors+=("‚ùå LLM_JWT_SECRET_KEY manquante dans appsettings.json")
    fi
    
    # V√©rifier LLM_ENABLE_AUTH
    enable_auth=$(grep -o '"LLM_ENABLE_AUTH"[^,]*' appsettings.json | cut -d'"' -f4)
    if [ "$enable_auth" == "true" ]; then
        echo -e "   ‚úÖ LLM_ENABLE_AUTH activ√©e"
    else
        warnings+=("‚ö†Ô∏è  LLM_ENABLE_AUTH d√©sactiv√©e - l'authentification JWT ne sera pas utilis√©e")
    fi
    
    # V√©rifier LLM_JWT_EXPIRATION_HOURS
    expiration=$(grep -o '"LLM_JWT_EXPIRATION_HOURS"[^,]*' appsettings.json | cut -d'"' -f4)
    if [ ! -z "$expiration" ]; then
        echo -e "   ‚úÖ LLM_JWT_EXPIRATION_HOURS configur√©e (${expiration}h)"
    else
        warnings+=("‚ö†Ô∏è  LLM_JWT_EXPIRATION_HOURS non configur√©e (utilise 24h par d√©faut)")
    fi
else
    errors+=("‚ùå Fichier webapp/appsettings.json introuvable")
fi

# 2. V√©rifier la configuration API LLM
echo -e "\n2Ô∏è‚É£  V√©rification de llmgamemaster/.env..."

if [ -f "../llmgamemaster/.env" ]; then
    # V√©rifier JWT_SECRET_KEY
    llm_jwt_secret=$(grep "^JWT_SECRET_KEY=" ../llmgamemaster/.env | cut -d'=' -f2)
    if [ ! -z "$llm_jwt_secret" ]; then
        if [ ${#llm_jwt_secret} -ge 32 ]; then
            echo -e "   ‚úÖ JWT_SECRET_KEY configur√©e dans l'API LLM (${#llm_jwt_secret} caract√®res)"
            
            # V√©rifier que les cl√©s sont identiques
            if [ "$jwt_secret" == "$llm_jwt_secret" ]; then
                echo -e "   ‚úÖ Cl√©s JWT synchronis√©es entre WebApp et API LLM"
            else
                errors+=("‚ùå Cl√©s JWT diff√©rentes entre WebApp et API LLM - ELLES DOIVENT √äTRE IDENTIQUES !")
            fi
        else
            errors+=("‚ùå JWT_SECRET_KEY API LLM trop courte (${#llm_jwt_secret} chars, minimum 32)")
        fi
    else
        errors+=("‚ùå JWT_SECRET_KEY manquante dans llmgamemaster/.env")
    fi
    
    # V√©rifier ENABLE_AUTH
    llm_enable_auth=$(grep "^ENABLE_AUTH=" ../llmgamemaster/.env | cut -d'=' -f2)
    if [ "$llm_enable_auth" == "true" ]; then
        echo -e "   ‚úÖ ENABLE_AUTH activ√©e dans l'API LLM"
    else
        warnings+=("‚ö†Ô∏è  ENABLE_AUTH d√©sactiv√©e dans l'API LLM")
    fi
else
    errors+=("‚ùå Fichier llmgamemaster/.env introuvable")
fi

# 3. V√©rifier les fichiers de service
echo -e "\n3Ô∏è‚É£  V√©rification des fichiers de service..."

required_files=(
    "Services/LLM/IJWTTokenService.cs"
    "Services/LLM/JWTTokenService.cs"
)

for file in "${required_files[@]}"; do
    if [ -f "$file" ]; then
        echo -e "   ‚úÖ $file pr√©sent"
    else
        errors+=("‚ùå Fichier manquant : $file")
    fi
done

# V√©rifier que LLMGameMasterService.cs a √©t√© modifi√©
if [ -f "Services/LLM/LLMGameMasterService.cs" ]; then
    if grep -q "ConfigureAuthenticationAsync" "Services/LLM/LLMGameMasterService.cs"; then
        echo -e "   ‚úÖ LLMGameMasterService.cs modifi√© pour JWT"
    else
        errors+=("‚ùå LLMGameMasterService.cs non modifi√© pour JWT")
    fi
else
    errors+=("‚ùå LLMGameMasterService.cs introuvable")
fi

# 4. V√©rifier le fichier de projet
echo -e "\n4Ô∏è‚É£  V√©rification des d√©pendances..."

if [ -f "DnDGameMaster.WebApp.csproj" ]; then
    if grep -q "System.IdentityModel.Tokens.Jwt" "DnDGameMaster.WebApp.csproj"; then
        echo -e "   ‚úÖ D√©pendance JWT pr√©sente dans le projet"
    else
        errors+=("‚ùå D√©pendance System.IdentityModel.Tokens.Jwt manquante")
    fi
else
    errors+=("‚ùå Fichier de projet DnDGameMaster.WebApp.csproj introuvable")
fi

# 5. R√©sum√© et recommandations
echo -e "\nüìä R√âSUM√â DE LA VALIDATION"
echo "========================="

if [ ${#errors[@]} -eq 0 ]; then
    echo -e "\nüéâ ${GREEN}INT√âGRATION JWT VALID√âE AVEC SUCC√àS !${NC}"
    echo -e "${GREEN}Votre application WebApp est correctement configur√©e pour l'authentification JWT.${NC}"
else
    echo -e "\n‚ùå ${RED}ERREURS D√âTECT√âES (${#errors[@]})${NC}"
    for error in "${errors[@]}"; do
        echo -e "   ${RED}$error${NC}"
    done
fi

if [ ${#warnings[@]} -gt 0 ]; then
    echo -e "\n‚ö†Ô∏è  ${YELLOW}AVERTISSEMENTS (${#warnings[@]})${NC}"
    for warning in "${warnings[@]}"; do
        echo -e "   ${YELLOW}$warning${NC}"
    done
fi

# Instructions suivantes
echo -e "\nüìã PROCHAINES √âTAPES"
echo "=================="

if [ ${#errors[@]} -gt 0 ]; then
    echo -e "${YELLOW}1. Corrigez les erreurs list√©es ci-dessus${NC}"
    echo -e "${YELLOW}2. Relancez ce script pour v√©rifier${NC}"
    echo -e "${YELLOW}3. Red√©marrez les services : docker-compose restart${NC}"
else
    echo -e "${GREEN}1. Red√©marrez les services : docker-compose restart${NC}"
    echo -e "${GREEN}2. Testez l'application : connectez-vous et envoyez un message √† une campagne${NC}"
    echo -e "${GREEN}3. V√©rifiez les logs pour confirmer l'authentification JWT${NC}"
fi

echo -e "\nüîç Validation termin√©e."

# Code de sortie
if [ ${#errors[@]} -gt 0 ]; then
    exit 1
else
    exit 0
fi
