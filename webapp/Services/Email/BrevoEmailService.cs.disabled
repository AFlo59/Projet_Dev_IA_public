using sib_api_v3_sdk.Api;
using sib_api_v3_sdk.Client;
using sib_api_v3_sdk.Model;
using System.Diagnostics;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;

namespace DnDGameMaster.WebApp.Services.Email
{
    public class BrevoEmailService : IEmailService
    {
        private readonly IConfiguration _configuration;
        private readonly ILogger<BrevoEmailService> _logger;
        
        public BrevoEmailService(IConfiguration configuration, ILogger<BrevoEmailService> logger)
        {
            _configuration = configuration;
            _logger = logger;
            
            // Configure Brevo API client
            try 
            {
                if (!Configuration.Default.ApiKey.ContainsKey("api-key"))
                {
                    Configuration.Default.ApiKey.Add("api-key", _configuration["BREVO_API_KEY"]);
                }
                else
                {
                    Configuration.Default.ApiKey["api-key"] = _configuration["BREVO_API_KEY"];
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error configuring Brevo API client");
            }
        }

        public async System.Threading.Tasks.Task SendEmailAsync(string to, string subject, string htmlMessage)
        {
            try
            {
                var apiInstance = new TransactionalEmailsApi();
                // Utiliser exactement l'adresse valid√©e dans Brevo
                var fromEmail = "etudessup59230@gmail.com";
                var fromName = _configuration["BREVO_FROM_NAME"] ?? "D&D GameMaster";
                
                _logger.LogInformation($"Attempting to send email from {fromEmail} to {to}");
                
                var sendSmtpEmail = new SendSmtpEmail(
                    to: new List<SendSmtpEmailTo> { new SendSmtpEmailTo(to) },
                    subject: subject,
                    htmlContent: htmlMessage,
                    sender: new SendSmtpEmailSender(fromEmail, fromName)
                );

                // In development mode (determined by checking ASPNETCORE_ENVIRONMENT or equivalent)
                // We'll still try to send the email - if it fails, the controller will auto-confirm
                await System.Threading.Tasks.Task.Run(() => apiInstance.SendTransacEmail(sendSmtpEmail));
                _logger.LogInformation($"Email sent to {to} with subject: {subject}");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Error sending email to {to}");
                Debug.WriteLine($"Error sending email: {ex.Message}");
                throw; // Rethrow to let the fallback mechanism handle it
            }
        }

        public async System.Threading.Tasks.Task SendEmailConfirmationAsync(string to, string userName, string confirmationLink)
        {
            var subject = "Confirm your email for D&D GameMaster";
            var htmlContent = $@"
                <html>
                <body>
                    <h1>Welcome to D&D GameMaster, {userName}!</h1>
                    <p>Please confirm your email address by clicking the link below:</p>
                    <p><a href='{confirmationLink}'>Confirm Email</a></p>
                    <p>If you did not create an account, you can ignore this email.</p>
                    <p>Thank you,<br>D&D GameMaster Team</p>
                </body>
                </html>";
                
            await SendEmailAsync(to, subject, htmlContent);
        }

        public async System.Threading.Tasks.Task SendPasswordResetAsync(string to, string userName, string resetLink)
        {
            var subject = "Reset your D&D GameMaster password";
            var htmlContent = $@"
                <html>
                <body>
                    <h1>Hello, {userName}!</h1>
                    <p>You requested a password reset for your D&D GameMaster account.</p>
                    <p>Please click the link below to reset your password:</p>
                    <p><a href='{resetLink}'>Reset Password</a></p>
                    <p>If you did not request a password reset, you can ignore this email.</p>
                    <p>Thank you,<br>D&D GameMaster Team</p>
                </body>
                </html>";
                
            await SendEmailAsync(to, subject, htmlContent);
        }

        public async System.Threading.Tasks.Task SendWelcomeEmailAsync(string to, string userName)
        {
            var subject = "Welcome to D&D GameMaster!";
            var htmlContent = $@"
                <html>
                <body>
                    <h1>Welcome, {userName}!</h1>
                    <p>Thank you for joining D&D GameMaster. Your account has been successfully created and activated.</p>
                    <p>You can now create campaigns, build characters, and start your adventures with our AI-powered Game Master.</p>
                    <p>Happy gaming!</p>
                    <p>The D&D GameMaster Team</p>
                </body>
                </html>";
                
            await SendEmailAsync(to, subject, htmlContent);
        }
    }
} 