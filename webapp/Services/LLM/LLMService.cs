using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;

namespace DnDGameMaster.WebApp.Services.LLM
{
    public class LLMService : ILLMService
    {
        private readonly HttpClient _httpClient;
        private readonly ILogger<LLMService> _logger;
        private readonly IConfiguration _configuration;
        
        public LLMService(
            HttpClient httpClient,
            ILogger<LLMService> logger,
            IConfiguration configuration)
        {
            _httpClient = httpClient;
            _logger = logger;
            _configuration = configuration;
        }
        
        /// <summary>
        /// Get text generated by the LLM model for a given prompt
        /// </summary>
        public async Task<string> GetGeneratedTextAsync(string prompt)
        {
            try
            {
                // This implementation uses the LLM GameMaster API to generate text
                // The API will use the currently selected provider (OpenAI or Anthropic)
                var request = new
                {
                    prompt = prompt
                };
                
                var content = new StringContent(
                    JsonSerializer.Serialize(request),
                    Encoding.UTF8,
                    "application/json"
                );
                
                var llmUrl = _configuration["LLM_GAMEMASTER_API_URL"] ?? throw new InvalidOperationException("LLM_GAMEMASTER_API_URL is required");
                var response = await _httpClient.PostAsync(llmUrl + "/generate", content);
                
                if (!response.IsSuccessStatusCode)
                {
                    _logger.LogWarning($"Failed to generate text. Status: {response.StatusCode}");
                    return string.Empty;
                }
                
                var responseContent = await response.Content.ReadAsStringAsync();
                var result = JsonSerializer.Deserialize<LLMTextResponse>(responseContent);
                
                return result?.response ?? string.Empty;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error generating text with LLM");
                return string.Empty;
            }
        }
        
        /// <summary>
        /// Get an image URL generated based on a prompt
        /// </summary>
        public async Task<string> GetGeneratedImageUrlAsync(string prompt)
        {
            try
            {
                _logger.LogInformation($"Generating image with prompt: {prompt}");
                
                // Always use OpenAI for image generation, regardless of which text provider is selected
                var request = new
                {
                    provider = "openai", // Force OpenAI for images
                    prompt = prompt
                };
                
                var content = new StringContent(
                    JsonSerializer.Serialize(request),
                    Encoding.UTF8,
                    "application/json"
                );
                
                // Ensure we're using an absolute URI
                var llmUrl = _configuration["LLM_GAMEMASTER_API_URL"] ?? throw new InvalidOperationException("LLM_GAMEMASTER_API_URL is required");
                var baseUri = new Uri(llmUrl);
                var requestUri = new Uri(baseUri, "generate_image");
                
                _logger.LogInformation($"Sending image generation request to: {requestUri}");
                
                // Call the image generation endpoint which should use OpenAI's DALL-E
                var response = await _httpClient.PostAsync(requestUri, content);
                
                if (!response.IsSuccessStatusCode)
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    _logger.LogWarning($"Failed to generate image. Status: {response.StatusCode}, Error: {errorContent}");
                    return "https://www.dndbeyond.com/avatars/default-avatar.png";
                }
                
                var responseContent = await response.Content.ReadAsStringAsync();
                _logger.LogInformation($"Image generation response: {responseContent}");
                
                var result = JsonSerializer.Deserialize<LLMImageResponse>(responseContent);
                
                if (string.IsNullOrEmpty(result?.image_url))
                {
                    _logger.LogWarning("Image URL was null or empty in the response");
                    return "https://www.dndbeyond.com/avatars/default-avatar.png";
                }
                
                _logger.LogInformation($"Successfully generated image URL: {result.image_url}");
                return result.image_url;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error generating image with LLM");
                return "https://www.dndbeyond.com/avatars/default-avatar.png";
            }
        }
        
        private class LLMTextResponse
        {
            public string? response { get; set; } = string.Empty;
        }
        
        private class LLMImageResponse
        {
            public string? image_url { get; set; } = string.Empty;
        }
    }
} 