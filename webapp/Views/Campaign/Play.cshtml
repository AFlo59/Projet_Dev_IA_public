@model DnDGameMaster.WebApp.Controllers.CampaignPlayViewModel

@{
    ViewData["Title"] = Model.Campaign.Name;
}

@if (Model.Campaign.ContentGenerationStatus != "ImagesCompleted")
{
    <div class="alert alert-warning text-center my-4">
        <i class="fas fa-spinner fa-spin me-2"></i>
        The campaign is still generating content and images. Please wait until everything is ready before playing.
    </div>
    <script>
        // Optionally, disable the message form and other interactive elements
        document.addEventListener('DOMContentLoaded', function() {
            document.getElementById('messageForm')?.querySelectorAll('input, textarea, button, select').forEach(el => el.disabled = true);
        });
    </script>
}

<div class="container-fluid py-4">
    <div class="row mb-4">
        <div class="col-md-8">
            <h1 class="mb-0">
                <i class="fas fa-book-open me-2"></i>@Model.Campaign.Name
            </h1>
        </div>
        <div class="col-md-4 text-md-end">
            <a asp-action="Details" asp-route-id="@Model.Campaign.Id" class="btn btn-secondary">
                <i class="fas fa-arrow-left me-2"></i>Back to Campaign
            </a>
        </div>
    </div>
    
    <div class="row">
        <!-- Left Column: Campaign Info + Character -->
        <div class="col-md-3">
            <!-- Campaign Info -->
            <div class="card mb-3">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-book-open me-2"></i>Campaign</h5>
                </div>
                <div class="card-body">
                    <p><strong>@Model.Campaign.Name</strong></p>
                    <p class="text-muted small">@Model.Campaign.Description</p>
                    @if (!string.IsNullOrEmpty(Model.Campaign.Settings))
                    {
                        <p class="small"><strong>Settings:</strong> @Model.Campaign.Settings</p>
                    }
                </div>
            </div>

            <!-- Character Info -->
            <div class="card mb-3">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-user-shield me-2"></i>Your Character</h5>
                </div>
                <div class="card-body">
                    <select id="quickCharacterSelect" class="form-select mb-3">
                        <option value="">Select Character</option>
                        @foreach (var character in Model.UserCharacters.Where(cc => cc.Character != null))
                        {
                            var isSelected = character.CharacterId == Model.SelectedCharacterId;
                            <option value="@character.CharacterId" selected="@isSelected">
                                @(character.Character?.Name ?? "Unknown Character")
                            </option>
                        }
                    </select>
                    <div id="characterInfo" class="@(Model.SelectedCharacterId > 0 ? "" : "d-none")">
                        <div class="text-center mb-3">
                            @{
                                var selectedChar = Model.UserCharacters
                                    .FirstOrDefault(cc => cc.CharacterId == Model.SelectedCharacterId)?.Character;
                                
                                if (selectedChar != null && !string.IsNullOrEmpty(selectedChar.PortraitUrl))
                                {
                                    <img src="@selectedChar.PortraitUrl" class="img-fluid rounded character-portrait" alt="@selectedChar.Name portrait" />
                                }
                                else
                                {
                                    <div class="character-portrait-placeholder d-flex align-items-center justify-content-center bg-light" style="width: 100px; height: 100px; border-radius: 8px; border: 2px dashed #dee2e6;">
                                        <div class="text-center">
                                            <i class="fas fa-user-circle fa-3x text-muted mb-2"></i>
                                            <p class="small text-muted mb-0">Portrait en cours...</p>
                                            <div class="spinner-border spinner-border-sm text-primary mt-2" role="status">
                                                <span class="visually-hidden">Loading...</span>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                        <div id="characterDetails">
                            @if (Model.SelectedCharacterId > 0)
                            {
                                var selectedCharacter = Model.UserCharacters
                                    .FirstOrDefault(cc => cc.CharacterId == Model.SelectedCharacterId)?.Character;
                                
                                if (selectedCharacter != null)
                                {
                                    <p class="small mb-1"><strong>Name:</strong> @selectedCharacter.Name</p>
                                    <p class="small mb-1"><strong>Class:</strong> @selectedCharacter.Class</p>
                                    <p class="small mb-1"><strong>Level:</strong> @selectedCharacter.Level</p>
                                    <p class="small mb-1"><strong>Race:</strong> @selectedCharacter.Race</p>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Center Column: Game Master Chat -->
        <div class="col-md-6">
            <div class="card mb-4">
                <div class="card-header">
                    <h3 class="mb-0"><i class="fas fa-dice-d20 me-2"></i>Game Master</h3>
                </div>
                <div class="card-body p-0">
                    <div class="chat-container" id="chatBox">
                        @if (!Model.Messages.Any())
                        {
                            <div class="text-center p-5">
                                <div class="mb-4">
                                    <i class="fas fa-dragon fa-3x text-primary"></i>
                                </div>
                                <h3>Begin Your Adventure!</h3>
                                <p class="text-muted">Send your first message to start the campaign with the AI Game Master.</p>
                            </div>
                        }
                        else
                        {
                            foreach (var message in Model.Messages.OrderBy(m => m.CreatedAt))
                            {
                                if (message.MessageType == "player")
                                {
                                    <div class="chat-message user-message mb-4" style="opacity: 1; transform: translateY(0);">
                                        <div class="d-flex">
                                            <div class="ms-auto">
                                                <div class="message-content">
                                                    @message.Content
                                                </div>
                                                <div class="message-meta text-end">
                                                    @(message.Character != null ? $"{message.Character.Name}" : "You") • @message.CreatedAt.ToString("g")
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                                else if (message.MessageType == "gm")
                                {
                                    <div class="chat-message ai-message mb-4" style="opacity: 1; transform: translateY(0);">
                                        <div class="d-flex">
                                            <div>
                                                <div class="message-content">
                                                    @Html.Raw(message.Content.Replace("\n", "<br>"))
                                                </div>
                                                <div class="message-meta">
                                                    Game Master • @message.CreatedAt.ToString("g")
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="chat-message system-message" style="opacity: 1; transform: translateY(0);">
                                        <div class="message-content">
                                            @message.Content
                                        </div>
                                    </div>
                                }
                            }
                        }
                    </div>
                </div>
            </div>
            
            <form id="messageForm" class="message-form">
                <input type="hidden" name="CampaignId" value="@Model.Campaign.Id" />
                <div class="card">
                    <div class="card-body">
                        <div class="form-group mb-3">
                            <label for="CharacterId" class="form-label">Speak as:</label>
                            <select id="CharacterId" class="form-select" name="CharacterId">
                                @foreach (var character in Model.UserCharacters.Where(cc => cc.Character != null))
                                {
                                    var isSelected = character.CharacterId == Model.SelectedCharacterId;
                                    <option value="@character.CharacterId" selected="@isSelected">
                                        @(character.Character?.Name ?? "Unknown") (Level @(character.Character?.Level ?? 0) @(character.Character?.Race ?? "") @(character.Character?.Class ?? ""))
                                    </option>
                                }
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="Content" class="form-label">Your message:</label>
                            <textarea id="Content" name="Content" class="form-control" rows="3" placeholder="Type your message..." required></textarea>
                        </div>
                    </div>
                    <div class="card-footer">
                        <button type="submit" class="btn btn-primary" id="sendMessageBtn">
                            <i class="fas fa-paper-plane me-2"></i>Send
                        </button>
                        <button type="button" class="btn btn-outline-secondary ms-2" id="rollDiceBtn">
                            <i class="fas fa-dice me-2"></i>Roll Dice
                        </button>
                        <div id="loadingIndicator" class="d-none ms-2">
                            <div class="spinner-border spinner-border-sm text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <span class="ms-2">The Game Master is thinking...</span>
                        </div>
                    </div>
                </div>
            </form>
        </div>
        
        <!-- Right Column: Current Location + NPCs + Quests -->
        <div class="col-md-3">
            <!-- Current Location -->
            <div class="card mb-3">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-map-marker-alt me-2"></i>Current Location</h5>
                </div>
                <div class="card-body">
                    <div id="currentLocation">
                        <div class="text-center text-muted">
                            <i class="fas fa-compass fa-2x mb-2"></i>
                            <p class="small">Location will appear as you explore</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- NPCs in Current Location -->
            <div class="card mb-3">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-users me-2"></i>NPCs Present</h5>
                </div>
                <div class="card-body">
                    <div id="currentLocationNPCs">
                        <div class="text-center text-muted">
                            <i class="fas fa-user-friends fa-2x mb-2"></i>
                            <p class="small">No NPCs in current location</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Active Quests -->
            <div class="card mb-3">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-scroll me-2"></i>Quests</h5>
                </div>
                <div class="card-body">
                    <div id="activeQuests">
                        <div class="text-center text-muted">
                            <i class="fas fa-question-circle fa-2x mb-2"></i>
                            <p class="small">No active quests</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <style>
        .character-portrait {
            width: 100px;
            height: 100px;
            object-fit: cover;
            border: 2px solid #343a40;
            border-radius: 8px;
        }
        
        .npc-portrait {
            width: 40px;
            height: 40px;
            object-fit: cover;
            border-radius: 50%;
            position: relative;
        }
        
        .location-image {
            width: 100%;
            max-height: 200px;
            object-fit: cover;
            border-radius: 8px;
            border: 2px solid #dee2e6;
        }
        
        .location-card {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border-radius: 8px;
            padding: 12px;
        }
        
        .npc-card {
            background-color: #f8f9fa;
            border: 1px solid #dee2e6 !important;
            transition: all 0.2s ease;
        }
        
        .npc-card:hover {
            background-color: #e9ecef;
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .quest-card {
            background-color: #fff3cd;
            border: 1px solid #ffeaa7 !important;
            transition: all 0.2s ease;
        }
        
        .quest-card:hover {
            background-color: #ffeaa7;
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .chat-container {
            height: 500px;
            overflow-y: auto;
            padding: 20px;
            scroll-behavior: smooth;
        }
        
        .chat-message {
            margin-bottom: 15px;
            opacity: 1;
            transform: translateY(0);
            transition: opacity 0.5s ease, transform 0.5s ease;
        }
        
        /* Animation pour l'apparition des messages */
        @@keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .animate-in {
            animation: fadeIn 0.5s forwards;
        }
        
        .user-message .message-content {
            background-color: #007bff;
            color: white;
            padding: 10px 15px;
            border-radius: 15px 15px 2px 15px;
            margin-left: 40px;
        }
        
        .ai-message .message-content {
            background-color: #f8f9fa;
            padding: 10px 15px;
            border-radius: 15px 15px 15px 2px;
            margin-right: 40px;
        }
        
        .system-message {
            text-align: center;
            padding: 10px;
            margin: 20px 0;
            color: #6c757d;
            font-style: italic;
        }
        
        .message-meta {
            font-size: 0.8rem;
            color: #6c757d;
            margin-top: 5px;
        }
        
        .typing-indicator {
            display: flex;
            align-items: center;
            margin: 10px 0;
        }
        
        .typing-indicator span {
            height: 10px;
            width: 10px;
            float: left;
            margin: 0 1px;
            background-color: #9E9EA1;
            display: block;
            border-radius: 50%;
            opacity: 0.4;
        }
        
        .typing-indicator span:nth-of-type(1) {
            animation: 1s blink infinite 0.3333s;
        }
        
        .typing-indicator span:nth-of-type(2) {
            animation: 1s blink infinite 0.6666s;
        }
        
        .typing-indicator span:nth-of-type(3) {
            animation: 1s blink infinite 0.9999s;
        }
        
        /* Animation pour les points qui clignotent */
        @@keyframes blink {
            50% { opacity: 1; }
        }
    </style>
    
    <script>
        // Typewriter effect function
        function typewriterEffect(elementId, text, callback, speed = 30) {
            const element = document.getElementById(elementId);
            if (!element) return;
            
            element.innerHTML = ''; // Clear any existing content
            let i = 0;
            const chatBox = document.getElementById('chatBox');
            
            function typeChar() {
                if (i < text.length) {
                    // Handle line breaks
                    if (text.substr(i, 1) === '\n') {
                        element.innerHTML += '<br>';
                    } else {
                        element.innerHTML += text.charAt(i);
                    }
                    i++;
                    
                    // Auto-scroll to keep up with typing
                    chatBox.scrollTop = chatBox.scrollHeight;
                    
                    setTimeout(typeChar, speed);
                } else {
                    // Typing complete, call callback if provided
                    if (callback) {
                        callback();
                    }
                }
            }
            
            typeChar();
        }
        
        // Scroll to bottom of chat on page load
        document.addEventListener('DOMContentLoaded', function () {
            var chatBox = document.getElementById('chatBox');
            chatBox.scrollTop = chatBox.scrollHeight;
            
            // Character selection
            const quickCharacterSelect = document.getElementById('quickCharacterSelect');
            const characterIdSelect = document.getElementById('CharacterId');
            const characterInfo = document.getElementById('characterInfo');
            const characterDetails = document.getElementById('characterDetails');
            
            quickCharacterSelect.addEventListener('change', function() {
                const selectedValue = this.value;
                
                if (selectedValue) {
                    characterIdSelect.value = selectedValue;
                    characterInfo.classList.remove('d-none');
                    
                    // Redirect to the same page with the selected character
                    window.location.href = `@Url.Action("Play", "Campaign", new { id = Model.Campaign.Id })?characterId=${selectedValue}`;
                } else {
                    characterIdSelect.value = '';
                    characterInfo.classList.add('d-none');
                }
            });
            
            // Dice roller
            const rollDiceBtn = document.getElementById('rollDiceBtn');
            const messageInput = document.getElementById('Content');
            
            rollDiceBtn.addEventListener('click', function() {
                const diceTypes = ['d4', 'd6', 'd8', 'd10', 'd12', 'd20', 'd100'];
                const selectedDice = prompt('Which dice do you want to roll? (d4, d6, d8, d10, d12, d20, d100)');
                
                if (diceTypes.includes(selectedDice)) {
                    const max = parseInt(selectedDice.substring(1));
                    const roll = Math.floor(Math.random() * max) + 1;
                    messageInput.value += `\nI roll a ${selectedDice}: ${roll}`;
                }
            });
            
            // AJAX form submission for messages with loading indicator
            const messageForm = document.getElementById('messageForm');
            const sendMessageBtn = document.getElementById('sendMessageBtn');
            const loadingIndicator = document.getElementById('loadingIndicator');
            
            // Add protection against multiple rapid submissions
            let isSubmitting = false;
            let lastSubmissionTime = 0;
            const SUBMISSION_COOLDOWN = 2000; // 2 seconds cooldown
            
            function showTypingIndicator() {
                const typingHtml = `
                    <div class="chat-message ai-message mb-4 animate-in" id="typing-indicator" style="opacity: 1; transform: translateY(0);">
                        <div class="d-flex">
                            <div>
                                <div class="typing-indicator">
                                    <span></span>
                                    <span></span>
                                    <span></span>
                                </div>
                                <div class="message-meta">
                                    Game Master is thinking...
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                chatBox.insertAdjacentHTML('beforeend', typingHtml);
                chatBox.scrollTop = chatBox.scrollHeight;
            }
            
            function hideTypingIndicator() {
                const typingIndicator = document.getElementById('typing-indicator');
                if (typingIndicator) {
                    typingIndicator.remove();
                }
            }
            
            // Auto-load current location data and discovered quests when page loads
            loadCurrentLocationData();
            loadDiscoveredQuests();
            
            // Initialize game state automatically if needed
            initializeGameStateIfNeeded();
            
            async function initializeGameStateIfNeeded() {
                try {
                    const campaignId = @Model.Campaign.Id;
                    
                    // Check if campaign content is completed
                    if ('@Model.Campaign.ContentGenerationStatus' === 'Completed' || '@Model.Campaign.ContentGenerationStatus' === 'ImagesCompleted') {
                        // Try to initialize game state
                        const response = await fetch(`@Url.Action("InitializeGameState", "Campaign")?campaignId=${campaignId}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            }
                        });
                        
                        const result = await response.json();
                        if (result.success) {
                            console.log('✅ Game state initialized successfully');
                            // Reload location data after initialization
                            setTimeout(() => {
                                loadCurrentLocationData();
                                loadDiscoveredQuests();
                            }, 1000);
                        }
                    }
                } catch (error) {
                    console.warn('Could not initialize game state:', error);
                }
            }
            
            async function loadCurrentLocationData() {
                // Prevent multiple simultaneous calls
                if (window.isLoadingLocationData) {
                    console.log('⏳ Already loading location data, skipping...');
                    return;
                }
                
                try {
                    window.isLoadingLocationData = true;
                    
                    const campaignId = @Model.Campaign.Id;
                    const selectedCharacterId = document.getElementById('CharacterId').value;
                    
                    if (!selectedCharacterId) {
                        return;
                    }
                    
                    console.log(`🔍 Loading location data for character ${selectedCharacterId}...`);
                    
                    const response = await fetch(`@Url.Action("GetCurrentLocationData", "Campaign")?campaignId=${campaignId}&characterId=${selectedCharacterId}`);
                    const result = await response.json();
                    
                    if (result.success && result.locationData) {
                        console.log(`✅ Location data loaded successfully`);
                        console.log('📊 Full location data received:', JSON.stringify(result.locationData, null, 2));
                        updateLocationDisplay(result.locationData);
                    } else {
                        console.log('❌ No location data received or failed');
                        console.log('📊 Response details:', result);
                    }
                } catch (error) {
                    console.error('Error loading current location data:', error);
                } finally {
                    window.isLoadingLocationData = false;
                }
            }
            
            function updateLocationDisplay(locationData) {
                // Update current location
                const locationContainer = document.getElementById('currentLocation');
                const npcsContainer = document.getElementById('currentLocationNPCs');
                
                // Find location info
                const location = locationData.find(item => item.Type === 'Location');
                const npcs = locationData.filter(item => item.Type === 'NPC');
                
                if (location) {
                    locationContainer.innerHTML = `
                        <div class="location-card">
                            <h6 class="mb-2"><i class="fas fa-map-marker-alt me-2"></i>${location.Name}</h6>
                            <p class="small text-muted mb-0">You are currently in ${location.Name}</p>
                        </div>
                    `;
                } else {
                    locationContainer.innerHTML = `
                        <div class="text-center text-muted">
                            <i class="fas fa-compass fa-2x mb-2"></i>
                            <p class="small">Location will appear as you explore</p>
                        </div>
                    `;
                }
                
                // Update NPCs
                if (npcs && npcs.length > 0) {
                    const npcsHtml = npcs.map(npc => `
                        <div class="npc-card card mb-2" onclick="interactWithNPC('${npc.Name}')">
                            <div class="card-body p-2">
                                <div class="d-flex align-items-center">
                                    ${npc.PortraitUrl ? 
                                        `<img src="${npc.PortraitUrl}" class="npc-portrait me-2" alt="${npc.Name}">` : 
                                        `<i class="fas fa-user-circle fa-2x text-secondary me-2"></i>`
                                    }
                                    <div>
                                        <h6 class="mb-0">${npc.Name}</h6>
                                        <p class="small text-muted mb-0">${npc.Description?.substring(0, 60) || 'An interesting character'}...</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `).join('');
                    
                    npcsContainer.innerHTML = npcsHtml;
                } else {
                    npcsContainer.innerHTML = `
                        <div class="text-center text-muted">
                            <i class="fas fa-user-friends fa-2x mb-2"></i>
                            <p class="small">No NPCs in current location</p>
                        </div>
                    `;
                }
            }
            
            async function loadDiscoveredQuests() {
                try {
                    const campaignId = @Model.Campaign.Id;
                    
                    const response = await fetch(`@Url.Action("GetDiscoveredQuests", "Campaign")?campaignId=${campaignId}`);
                    const result = await response.json();
                    
                    if (result.success && result.quests) {
                        updateQuestsDisplay(result.quests);
                    }
                } catch (error) {
                    console.error('Error loading discovered quests:', error);
                }
            }
            
            function updateQuestsDisplay(quests) {
                const questsContainer = document.getElementById('activeQuests');
                
                if (quests && quests.length > 0) {
                    const questsHtml = quests.map(quest => `
                        <div class="quest-card card mb-2">
                            <div class="card-body p-2">
                                <h6 class="mb-1">${quest.Title}</h6>
                                <p class="small text-muted mb-1">${quest.Description?.substring(0, 80) || 'A quest awaits'}...</p>
                                <div class="d-flex justify-content-between align-items-center">
                                    <span class="badge bg-${quest.Status === 'InProgress' ? 'primary' : 'secondary'} small">${quest.Status}</span>
                                    <small class="text-muted">${quest.QuestGiver}</small>
                                </div>
                            </div>
                        </div>
                    `).join('');
                    
                    questsContainer.innerHTML = questsHtml;
                } else {
                    questsContainer.innerHTML = `
                        <div class="text-center text-muted">
                            <i class="fas fa-question-circle fa-2x mb-2"></i>
                            <p class="small">No active quests</p>
                            <p class="small">Talk to NPCs to discover quests!</p>
                        </div>
                    `;
                }
            }
            
            function interactWithNPC(npcName) {
                // Add a system message about interacting with the NPC
                const messageInput = document.getElementById('Content');
                const currentValue = messageInput.value.trim();
                
                const interactionText = `I approach and speak with ${npcName}.`;
                
                if (currentValue) {
                    messageInput.value = currentValue + '\n\n' + interactionText;
                } else {
                    messageInput.value = interactionText;
                }
                
                // Focus on the message input
                messageInput.focus();
                messageInput.scrollIntoView({ behavior: 'smooth' });
                
                // 🔧 NEW: Auto-handle NPC interaction for quest discovery
                handleNPCInteractionAutomatically(npcName);
                
                // Optionally auto-submit the interaction
                // messageForm.dispatchEvent(new Event('submit'));
            }
            
            // 🆕 NEW FUNCTION: Handle NPC interaction automatically for quest discovery
            async function handleNPCInteractionAutomatically(npcName) {
                try {
                    const campaignId = @Model.Campaign.Id;
                    const selectedCharacterId = document.getElementById('CharacterId').value;
                    
                    if (!selectedCharacterId) {
                        console.warn('No character selected for NPC interaction');
                        return;
                    }
                    
                    // Call the backend to handle NPC interaction
                    const response = await fetch(`@Url.Action("InteractWithNPC", "Campaign")`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                        },
                        body: new URLSearchParams({
                            campaignId: campaignId,
                            characterId: selectedCharacterId,
                            npcName: npcName
                        })
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        console.log(`✅ NPC interaction handled: ${result.message}`);
                        
                        // If quests were discovered, show a notification
                        if (result.questsDiscovered) {
                            showQuestDiscoveryNotification(npcName, result.discoveredQuests);
                        }
                        
                        // Reload quest data to show newly discovered quests
                        setTimeout(() => {
                            loadDiscoveredQuests();
                        }, 1000);
                    } else {
                        console.warn(`⚠️ NPC interaction failed: ${result.error || 'Unknown error'}`);
                    }
                } catch (error) {
                    console.error('Error handling NPC interaction:', error);
                }
            }
            
            // 🆕 NEW FUNCTION: Show quest discovery notification
            function showQuestDiscoveryNotification(npcName, discoveredQuests) {
                // Create a toast notification for quest discovery
                const toastHtml = `
                    <div class="toast show position-fixed top-0 end-0 m-3" style="z-index: 1055;" id="questDiscoveryToast">
                        <div class="toast-header bg-success text-white">
                            <i class="fas fa-scroll me-2"></i>
                            <strong class="me-auto">Quest Discovery!</strong>
                            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast"></button>
                        </div>
                        <div class="toast-body">
                            <strong>${npcName}</strong> has shared new quests with you!
                            ${discoveredQuests && discoveredQuests.length > 0 ? 
                                `<ul class="mb-0 mt-2">${discoveredQuests.map(q => `<li><strong>${q.Title}</strong></li>`).join('')}</ul>` :
                                ''
                            }
                        </div>
                    </div>
                `;
                
                // Add to page
                document.body.insertAdjacentHTML('beforeend', toastHtml);
                
                // Auto-remove after 5 seconds
                setTimeout(() => {
                    const toast = document.getElementById('questDiscoveryToast');
                    if (toast) {
                        toast.remove();
                    }
                }, 5000);
            }
            
            // Reload location and quest data when character selection changes
            document.getElementById('CharacterId').addEventListener('change', function() {
                setTimeout(() => {
                    loadCurrentLocationData();
                    loadDiscoveredQuests();
                }, 500);
            });
            
            // Reload quest data after sending a message (in case new quests were discovered)
            const originalSubmitHandler = messageForm.onsubmit;
            
            messageForm.onsubmit = function(e) {
                e.preventDefault();
                
                const now = Date.now();
                
                // Check if we're already submitting or if we're in cooldown period
                if (isSubmitting || (now - lastSubmissionTime) < SUBMISSION_COOLDOWN) {
                    console.log('Submission blocked: already submitting or in cooldown');
                    return;
                }
                
                // Set submission state
                isSubmitting = true;
                lastSubmissionTime = now;
                
                // Disable form and show loading
                sendMessageBtn.disabled = true;
                loadingIndicator.classList.remove('d-none');
                
                const formData = new FormData(this);
                const jsonData = {};
                formData.forEach((value, key) => {
                    jsonData[key] = value;
                });
                
                // Show user message immediately
                const playerMessageHtml = `
                    <div class="chat-message user-message mb-4 animate-in" style="opacity: 1; transform: translateY(0);">
                        <div class="d-flex">
                            <div class="ms-auto">
                                <div class="message-content">
                                    ${jsonData.Content}
                                </div>
                                <div class="message-meta text-end">
                                    ${document.querySelector('#CharacterId option:checked').text.split('(')[0].trim()} • ${new Date().toLocaleString()}
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                chatBox.innerHTML += playerMessageHtml;
                chatBox.scrollTop = chatBox.scrollHeight;
                
                // Show typing indicator
                showTypingIndicator();
                
                // Small delay to ensure the indicator is visible
                setTimeout(() => {
                    // Force repaint to make the typing indicator visible
                    document.body.style.display = 'none';
                    document.body.offsetHeight; // Trigger a reflow
                    document.body.style.display = '';
                    
                    fetch('@Url.Action("SendMessage", "Campaign")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify(jsonData)
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        // Remove typing indicator
                        hideTypingIndicator();
                        
                        if (data.success) {
                            // Create GM message container with empty content
                            const gmMessageId = 'gm-message-' + Date.now();
                            const gmMessageHtml = `
                                <div class="chat-message ai-message mb-4 animate-in" style="opacity: 1; transform: translateY(0);">
                                    <div class="d-flex">
                                        <div>
                                            <div class="message-content" id="${gmMessageId}">
                                                <!-- Content will be typed here -->
                                            </div>
                                            <div class="message-meta">
                                                Game Master • ${data.gmMessage.timestamp}
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            `;
                            
                            chatBox.innerHTML += gmMessageHtml;
                            chatBox.scrollTop = chatBox.scrollHeight;
                            
                            // Start typewriter effect for GM message
                            typewriterEffect(gmMessageId, data.gmMessage.content, () => {
                                // After GM message, force reload location and NPCs data
                                console.log('🎬 GM message completed, forcing location/NPCs refresh...');
                                
                                // Clear cached location and force reload
                                window.currentLocationName = null;
                                window.npcsUpdatedViaLocationData = false;
                                
                                // Load campaign elements with forced update
                                loadCampaignElements(true);
                                window.campaignElementsLoaded = true;
                            });
                            
                            // Add image if available
                            if (data.imageUrl) {
                                const imageHtml = `
                                    <div class="chat-message ai-message mb-4 animate-in" style="opacity: 1; transform: translateY(0);">
                                        <div class="d-flex">
                                            <div>
                                                <img src="${data.imageUrl}" class="img-fluid rounded" alt="Generated scene" />
                                            </div>
                                        </div>
                                    </div>
                                `;
                                chatBox.innerHTML += imageHtml;
                                chatBox.scrollTop = chatBox.scrollHeight;
                            }
                            
                            // Clear the input
                            document.getElementById('Content').value = '';
                        } else {
                            alert('Error: ' + data.message);
                        }
                    })
                    .catch(error => {
                        hideTypingIndicator();
                        console.error('Error:', error);
                        alert('An error occurred while sending your message.');
                    })
                    .finally(() => {
                        // Re-enable form and reset submission state
                        sendMessageBtn.disabled = false;
                        loadingIndicator.classList.add('d-none');
                        isSubmitting = false;
                    });
                }, 50);
            };
            
            // Function to check if we need to reload the page after message submission
            function checkAndRefreshIfNeeded() {
                const urlParams = new URLSearchParams(window.location.search);
                const needsRefresh = urlParams.get('refresh');
                
                if (needsRefresh === 'true') {
                    // Remove the refresh parameter from URL to prevent infinite refresh
                    const newUrl = window.location.pathname;
                    window.history.replaceState({}, document.title, newUrl);
                    
                    // Scroll to bottom to see latest messages
                    chatBox.scrollTop = chatBox.scrollHeight;
                }
            }
            
            // Call the function when page loads
            checkAndRefreshIfNeeded();
            
            // Load campaign elements initially with a delay to avoid race conditions
            setTimeout(() => {
                loadCampaignElements();
                
                // Force NPC reload after 10 seconds if no NPCs are displayed
                setTimeout(() => {
                    const npcsDiv = document.getElementById('currentLocationNPCs');
                    const hasNPCs = npcsDiv && npcsDiv.querySelector('.npc-card');
                    
                    if (!hasNPCs && window.currentLocationName) {
                        console.log('🔁 No NPCs found after 10s, forcing reload...');
                        loadCampaignElements(true); // Force NPC update
                    }
                }, 10000);
                
            }, 2000);
            
            // ✅ CORRECTION : Load location once initially, then check less frequently
            console.log('🔍 Initial location data load...');
            loadCurrentLocationData();
            
            // Check for location updates every 2 minutes instead of every 5 seconds
            // This reduces server load while still allowing for location changes
            setInterval(() => {
                console.log('🔄 Periodic location check (every 2 minutes)');
                loadCurrentLocationData();
            }, 120000); // Every 2 minutes
            
            // Refresh campaign elements every 5 minutes
            setInterval(loadCampaignElements, 300000); // Every 5 minutes
        });
        
        // Function to load campaign elements from the server
        function loadCampaignElements(forceNPCUpdate = false) {
            // Prevent multiple simultaneous calls
            if (window.isLoadingElements) {
                console.log('⏳ Already loading elements, skipping...');
                return;
            }
            
            console.log('🔄 Loading campaign elements...');
            window.isLoadingElements = true;
            
            // Reset the flag to allow NPCs to be updated via the normal method if needed or forced
            if (forceNPCUpdate) {
                console.log('🔁 Forcing NPC update...');
                window.npcsUpdatedViaLocationData = false;
            }
            
            fetch(`@Url.Action("GetElements", "Campaign", new { id = Model.Campaign.Id })`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        console.log('📦 Received campaign elements:', data);
                        
                        // Only update if we have new data
                        if (data.locations && data.locations.length > 0) {
                            updateCurrentLocation(data.locations);
                        }
                        if (data.npcs && data.npcs.length > 0) {
                            console.log(`👥 Processing ${data.npcs.length} NPCs from elements API`);
                            updateNPCs(data.npcs, data.locations || []);
                        } else {
                            console.log('⚠️ No NPCs received from elements API');
                        }
                        if (data.quests && data.quests.length >= 0) { // Allow empty quests array
                            updateQuests(data.quests);
                        }
                        
                        // Check for missing images and generate them automatically
                        checkAndGenerateMissingImages(data.npcs || [], data.locations || []);
                    } else {
                        console.error('❌ Campaign elements API returned error:', data);
                    }
                })
                .catch(error => {
                    console.error('❌ Error loading campaign elements:', error);
                })
                .finally(() => {
                    window.isLoadingElements = false;
                    console.log('✅ Finished loading campaign elements');
                });
        }
        
        // Function to check and generate missing images
        function checkAndGenerateMissingImages(npcs, locations) {
            // Only check for missing images once per session to avoid spam
            if (window.imageGenerationChecked) {
                return;
            }
            
            const missingImages = [];
            
            // Check NPCs without portraits
            npcs.forEach(npc => {
                if ((!npc.PortraitUrl || npc.PortraitUrl.trim() === '') && npc.Status === 'Active') {
                    missingImages.push({ type: 'npc', id: npc.Id, name: npc.Name });
                }
            });
            
            // Check locations without images
            locations.forEach(location => {
                if ((!location.ImageUrl || location.ImageUrl.trim() === '') && location.IsDiscovered) {
                    missingImages.push({ type: 'location', id: location.Id, name: location.Name });
                }
            });
            
            // If there are missing images, start generation (only once)
            if (missingImages.length > 0) {
                console.log(`🔍 Found ${missingImages.length} missing images:`, missingImages);
                window.imageGenerationChecked = true; // Prevent multiple calls
                
                fetch(`@Url.Action("GenerateMissingImages", "Campaign", new { id = Model.Campaign.Id })`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        console.log('✅ Image generation started successfully');
                        // Force refresh after 30 seconds to check for new images
                        setTimeout(() => {
                            console.log('🔄 Forcing refresh after image generation...');
                            loadCurrentLocationData();
                            loadCampaignElements(true);
                        }, 30000);
                    } else {
                        console.warn('⚠️ Image generation failed:', data.message);
                        window.imageGenerationChecked = false; // Reset on failure
                    }
                })
                .catch(error => {
                    console.error('❌ Error starting image generation:', error);
                    window.imageGenerationChecked = false; // Reset on error
                });
            } else {
                console.log('✅ All images are present, no generation needed');
            }
        }
        
        // Function to update current location display
        function updateCurrentLocation(locations) {
            const currentLocationDiv = document.getElementById('currentLocation');
            const selectedCharacterId = document.getElementById('CharacterId')?.value || @Model.SelectedCharacterId;
            
            // If we have a cached current location name and it exists in the locations, use it
            if (window.currentLocationName && locations.find(loc => loc.Name === window.currentLocationName)) {
                const cachedLocation = locations.find(loc => loc.Name === window.currentLocationName);
                displayLocationInfo(cachedLocation, currentLocationDiv);
                return;
            }
            
            // Get the character's current location dynamically from the server
            if (selectedCharacterId) {
                // Add cache-busting parameter to ensure fresh data
                const timestamp = Date.now();
                fetch(`@Url.Action("GetCurrentLocationData", "Campaign")?campaignId=@Model.Campaign.Id&characterId=${selectedCharacterId}&_t=${timestamp}`)
                    .then(response => response.json())
                    .then(data => {
                        console.log('🏃‍♂️ GetCurrentLocationData response:', JSON.stringify(data, null, 2));
                        if (data.success && data.locationData && data.locationData.length > 0) {
                            console.log('🏃‍♂️ Received location data from server:', data.locationData);
                            
                            // Find location from the current location data
                            const locationInfo = data.locationData.find(item => item.Type === 'Location');
                            console.log('🔍 Searching for location in data:', locationInfo);
                            if (locationInfo) {
                                console.log('📍 Found location info:', locationInfo);
                                const currentLocation = locations.find(loc => loc.Name === locationInfo.Name);
                                if (currentLocation) {
                                    displayLocationInfo(currentLocation, currentLocationDiv);
                                    window.currentLocationName = currentLocation.Name;
                                    console.log(`✅ Set current location to: ${currentLocation.Name}`);
                                    
                                    // Also update NPCs with the location data from server
                                    const npcsInLocation = data.locationData.filter(item => item.Type === 'NPC');
                                    console.log(`👥 Found ${npcsInLocation.length} NPCs in location data:`, npcsInLocation);
                                    console.log('🧪 About to call updateNPCsFromLocationData with:', npcsInLocation);
                                    updateNPCsFromLocationData(npcsInLocation);
                                    return;
                                }
                            }
                        } else {
                            console.log('❌ GetCurrentLocationData failed or no data:', data);
                        }
                        
                        // Fallback logic if server call fails or returns no data
                        fallbackLocationSelection(locations, currentLocationDiv);
                    })
                    .catch(error => {
                        console.error('Error getting current location data:', error);
                        // Fallback logic on error
                        fallbackLocationSelection(locations, currentLocationDiv);
                    });
            } else {
                // No character selected, use fallback
                fallbackLocationSelection(locations, currentLocationDiv);
            }
        }
        
        // Function to handle fallback location selection
        function fallbackLocationSelection(locations, currentLocationDiv) {
            // Get the selected character's current location from static data as fallback
            const selectedCharacterId = document.getElementById('CharacterId')?.value || @Model.SelectedCharacterId;
            let characterLocation = null;
            if (selectedCharacterId) {
                const userCharactersData = @Html.Raw(Json.Serialize(Model.UserCharacters.Select(cc => new {
                    CharacterId = cc.CharacterId,
                    CurrentLocation = cc.CurrentLocation
                })));
                
                const selectedCharacter = userCharactersData
                    .find(cc => cc.CharacterId == selectedCharacterId);
                characterLocation = selectedCharacter?.CurrentLocation;
            }
            
            // Find the character's current location in the locations list
            let currentLocation = null;
            if (characterLocation) {
                currentLocation = locations.find(loc => loc.Name === characterLocation);
            }
            
            // If no specific location found, fall back to most recently discovered
            if (!currentLocation) {
                const discoveredLocations = locations.filter(loc => loc.IsDiscovered && loc.IsAccessible);
                if (discoveredLocations.length > 0) {
                    currentLocation = discoveredLocations[discoveredLocations.length - 1];
                }
            }
            
            if (currentLocation) {
                displayLocationInfo(currentLocation, currentLocationDiv);
                window.currentLocationName = currentLocation.Name;
            } else {
                displayNoLocation(currentLocationDiv);
                window.currentLocationName = null;
            }
        }
        
        // Function to display location information
        function displayLocationInfo(currentLocation, currentLocationDiv) {
            // Create location image HTML
            let locationImageHtml = '';
            if (currentLocation.ImageUrl && currentLocation.ImageUrl.trim() !== '') {
                // Ensure the image URL is properly formatted
                let imageUrl = currentLocation.ImageUrl;
                if (!imageUrl.startsWith('http') && !imageUrl.startsWith('/')) {
                    imageUrl = '/' + imageUrl;
                }
                
                                 // Si l'image existe, on affiche seulement l'image (pas de placeholder)
                 locationImageHtml = `
                     <div class="text-center mb-3">
                         <img src="${imageUrl}" class="img-fluid rounded location-image" alt="${currentLocation.Name}" />
                     </div>
                 `;
            } else {
                // Si pas d'image, on affiche le placeholder de génération
                locationImageHtml = `
                    <div class="text-center mb-3">
                        <div class="location-image-placeholder d-flex align-items-center justify-content-center bg-light" style="height: 200px; border-radius: 8px; border: 2px dashed #dee2e6;">
                            <div class="text-center">
                                <i class="fas fa-image fa-3x text-muted mb-2"></i>
                                <p class="small text-muted mb-0">Image en cours de génération...</p>
                                <div class="spinner-border spinner-border-sm text-primary mt-2" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            }
            
            currentLocationDiv.innerHTML = `
                ${locationImageHtml}
                <div class="location-card">
                    <h6 class="fw-bold text-primary">${currentLocation.Name}</h6>
                    <p class="small text-muted mb-1">${currentLocation.Type}</p>
                    ${currentLocation.ShortDescription ? `<p class="small">${currentLocation.ShortDescription}</p>` : ''}
                    ${currentLocation.Climate ? `<p class="small"><strong>Climate:</strong> ${currentLocation.Climate}</p>` : ''}
                    ${currentLocation.Terrain ? `<p class="small"><strong>Terrain:</strong> ${currentLocation.Terrain}</p>` : ''}
                </div>
            `;
        }
        
        // Function to display "no location" state
        function displayNoLocation(currentLocationDiv) {
            currentLocationDiv.innerHTML = `
                <div class="text-center text-muted">
                    <i class="fas fa-compass fa-2x mb-2"></i>
                    <p class="small">Location will appear as you explore</p>
                </div>
            `;
        }
        
        // Function to update NPCs from location data (bypassing the normal NPC filtering)
        function updateNPCsFromLocationData(npcsInLocation) {
            const npcsDiv = document.getElementById('currentLocationNPCs');
            
            console.log(`👥 Updating NPCs from location data: ${npcsInLocation.length} NPCs found`);
            console.log('📝 NPCs details:', npcsInLocation);
            console.log('🔍 NPCs data structure:', JSON.stringify(npcsInLocation, null, 2));
            
            // If no NPCs in location data, simply show "no NPCs" message
            if (!npcsInLocation || npcsInLocation.length === 0) {
                console.log('ℹ️ No NPCs in current location');
                showNoNPCsMessage(npcsDiv);
                window.npcsUpdatedViaLocationData = true; // Mark as handled
                return;
            }
            
            // Mark that NPCs were updated via location data
            window.npcsUpdatedViaLocationData = true;
            
            if (npcsInLocation && npcsInLocation.length > 0) {
                console.log('✅ DISPLAYING NPCs - entering HTML generation');
                const npcsHtml = npcsInLocation.map(npc => {
                    // Ensure the portrait URL is properly formatted
                    let portraitUrl = npc.PortraitUrl;
                    if (portraitUrl && !portraitUrl.startsWith('http') && !portraitUrl.startsWith('/')) {
                        portraitUrl = '/' + portraitUrl;
                    }
                    
                    return `
                        <div class="npc-card mb-2 p-2 border rounded">
                            <div class="d-flex align-items-center">
                                ${portraitUrl && portraitUrl.trim() !== '' ? 
                                    `<img src="${portraitUrl}" class="npc-portrait me-2" alt="${npc.Name}" 
                                          onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" />` : 
                                    `<div class="npc-portrait me-2 d-flex align-items-center justify-content-center bg-light position-relative">
                                        <i class="fas fa-user-circle text-muted"></i>
                                    </div>`
                                }
                                <div class="npc-portrait me-2 d-flex align-items-center justify-content-center bg-light position-relative" style="display: none;">
                                    <i class="fas fa-user-circle text-muted"></i>
                                </div>
                                <div>
                                    <h6 class="mb-0 small">${npc.Name}</h6>
                                    <p class="mb-0 small text-muted">${npc.Race || 'Unknown'} ${npc.Class || npc.Type || ''}</p>
                                    ${npc.Level && npc.Level > 1 ? `<p class="mb-0 small">Level ${npc.Level}</p>` : ''}
                                </div>
                            </div>
                            ${npc.Description ? `<p class="small mt-2 mb-0">${npc.Description.substring(0, 100)}${npc.Description.length > 100 ? '...' : ''}</p>` : ''}
                        </div>
                    `;
                }).join('');
                
                console.log('🎨 Generated NPCs HTML:', npcsHtml);
                npcsDiv.innerHTML = npcsHtml;
                console.log(`✅ Successfully displayed ${npcsInLocation.length} NPCs from location data`);
                console.log('🔍 Final NPCs container content:', npcsDiv.innerHTML);
            } else {
                showNoNPCsMessage(npcsDiv);
            }
        }
        
        // Function to show "no NPCs" message
        function showNoNPCsMessage(npcsDiv) {
            console.log('📭 showNoNPCsMessage called - no NPCs to display');
            console.log('🔍 NPCs div element:', npcsDiv);
            npcsDiv.innerHTML = `
                <div class="text-center text-muted">
                    <i class="fas fa-user-friends fa-2x mb-2"></i>
                    <p class="small">No NPCs in current location</p>
                    <p class="small text-muted">NPCs will appear as you interact with them</p>
                </div>
            `;
            console.log('📭 Displayed "no NPCs" message');
        }
        
        // Function to update NPCs display (fallback method, only used if location data not already set)
        function updateNPCs(npcs, locations) {
            // Skip if NPCs were already updated via the dynamic location data
            if (window.npcsUpdatedViaLocationData) {
                console.log('🔄 NPCs already updated via location data, skipping updateNPCs');
                return;
            }
            
            const npcsDiv = document.getElementById('currentLocationNPCs');
            
            // Only update if we have a current location name
            if (!window.currentLocationName) {
                console.log('⚠️ No current location name set, skipping NPC update');
                return;
            }
            
            console.log(`🔍 Filtering NPCs for location: '${window.currentLocationName}'`);
            console.log('📋 All available NPCs:', npcs);
            
            // Filter NPCs that are in the current location with more flexible matching
            const currentLocationNPCs = npcs.filter(npc => {
                const isActive = npc.Status === 'Active';
                const isInLocation = npc.CurrentLocation === window.currentLocationName;
                const isInAnyLocation = !npc.CurrentLocation; // NPCs without specific location can appear anywhere
                
                console.log(`🔍 NPC ${npc.Name}: Active=${isActive}, Location='${npc.CurrentLocation}', Match=${isInLocation || isInAnyLocation}`);
                
                return isActive && (isInLocation || isInAnyLocation);
            });
            
            console.log(`✅ Found ${currentLocationNPCs.length} NPCs in location '${window.currentLocationName}' via fallback method`);
            console.log('📍 Current location:', window.currentLocationName);
            console.log('👥 Filtered NPCs:', currentLocationNPCs);
            
            if (currentLocationNPCs.length > 0) {
                const npcsHtml = currentLocationNPCs.map(npc => `
                    <div class="npc-card mb-2 p-2 border rounded">
                        <div class="d-flex align-items-center">
                            ${npc.PortraitUrl ? 
                                `<img src="${npc.PortraitUrl}" class="npc-portrait me-2" alt="${npc.Name}">` : 
                                `<div class="npc-portrait me-2 d-flex align-items-center justify-content-center bg-light position-relative">
                                    <i class="fas fa-user-circle text-muted"></i>
                                    <div class="position-absolute top-50 start-50 translate-middle">
                                        <div class="spinner-border spinner-border-sm text-primary" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                    </div>
                                </div>`
                            }
                            <div>
                                <h6 class="mb-0 small">${npc.Name}</h6>
                                <p class="mb-0 small text-muted">${npc.Race} ${npc.Class || npc.Type}</p>
                                ${npc.Level > 1 ? `<p class="mb-0 small">Level ${npc.Level}</p>` : ''}
                            </div>
                        </div>
                        ${npc.Description ? `<p class="small mt-2 mb-0">${npc.Description.substring(0, 100)}${npc.Description.length > 100 ? '...' : ''}</p>` : ''}
                    </div>
                `).join('');
                
                npcsDiv.innerHTML = npcsHtml;
            } else {
                npcsDiv.innerHTML = `
                    <div class="text-center text-muted">
                        <i class="fas fa-user-friends fa-2x mb-2"></i>
                        <p class="small">No NPCs in current location</p>
                        <p class="small text-muted">NPCs will appear as you interact with them</p>
                    </div>
                `;
            }
        }
        
        // Function to update quests display
        function updateQuests(quests) {
            const questsDiv = document.getElementById('activeQuests');
            
            // Filter active quests only (accepted quests)
            const activeQuests = quests.filter(quest => 
                quest.Status === 'Active' || quest.Status === 'InProgress'
            );
            
            console.log(`Found ${activeQuests.length} active quests out of ${quests.length} total quests`);
            console.log('All quests:', quests);
            
            if (activeQuests.length > 0) {
                const questsHtml = activeQuests.map(quest => `
                    <div class="quest-card mb-2 p-2 border rounded">
                        <h6 class="mb-1 small">${quest.Title}</h6>
                        <p class="mb-1 small text-muted">${quest.Type} - ${quest.Difficulty || 'Medium'}</p>
                        <span class="badge bg-${quest.Status === 'Active' ? 'primary' : 'warning'} small">${quest.Status}</span>
                        ${quest.Progress ? `<div class="progress mt-2" style="height: 8px;">
                            <div class="progress-bar" role="progressbar" style="width: ${quest.Progress}%" aria-valuenow="${quest.Progress}" aria-valuemin="0" aria-valuemax="100"></div>
                        </div>` : ''}
                        ${quest.ShortDescription ? `<p class="small mt-2 mb-0">${quest.ShortDescription}</p>` : ''}
                        ${quest.Reward ? `<p class="small mt-1 mb-0 text-success"><strong>Reward:</strong> ${quest.Reward}</p>` : ''}
                    </div>
                `).join('');
                
                questsDiv.innerHTML = questsHtml;
            } else {
                questsDiv.innerHTML = `
                    <div class="text-center text-muted">
                        <i class="fas fa-question-circle fa-2x mb-2"></i>
                        <p class="small">No active quests</p>
                        <p class="small text-muted">Accept quests from NPCs to see them here</p>
                    </div>
                `;
            }
        }
    </script>
} 